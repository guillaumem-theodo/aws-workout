---
  AWSTemplateFormatVersion: "2010-09-09"
  Parameters:
    dojo:
      Type: String
      Default: 'aws-workout'
    LatestAmiId:
      Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
      Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  Resources:

# Create three VPCs
    Net109Vpc1:
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock: "10.0.0.0/16"
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          -
            Key: "Purpose"
            Value: !Ref dojo
          -
            Key: "Name"
            Value: 'net-109-vpc-1'

    Net109Vpc2:
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock: "10.1.0.0/16"
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          -
            Key: "Purpose"
            Value: !Ref dojo
          -
            Key: "Name"
            Value: 'net-109-vpc-2'

    Net109Vpc3:
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock: "10.2.0.0/16"
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          -
            Key: "Purpose"
            Value: !Ref dojo
          -
            Key: "Name"
            Value: 'net-109-vpc-3'

# Create one subnet in each VPC
    Subnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref Net109Vpc1
        AvailabilityZone:
          Fn::Sub: "${AWS::Region}a"
        CidrBlock: "10.0.0.0/24"
        Tags:
          -
            Key: "Purpose"
            Value: !Ref dojo
          -
            Key: "Name"
            Value: 'net-109-subnet-1'
    Subnet2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref Net109Vpc2
        AvailabilityZone:
          Fn::Sub: "${AWS::Region}a"
        CidrBlock: "10.1.0.0/24"
        Tags:
          -
            Key: "Purpose"
            Value: !Ref dojo
          -
            Key: "Name"
            Value: 'net-109-subnet-2'
    Subnet3:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref Net109Vpc3
        AvailabilityZone:
          Fn::Sub: "${AWS::Region}a"
        CidrBlock: "10.2.0.0/24"
        Tags:
          -
            Key: "Purpose"
            Value: !Ref dojo
          -
            Key: "Name"
            Value: 'net-109-subnet-3'


# Give access from internet for SSH in Subnet 1
    IGW:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: "Name"
            Value: "net-109-igw"
          - Key: "Purpose"
            Value: !Ref dojo

    IGWAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref IGW
        VpcId: !Ref Net109Vpc3

    Net109Rt3:
      Type: AWS::EC2::RouteTable
      DependsOn: IGWAttachment
      Properties:
        VpcId: !Ref Net109Vpc3
        Tags:
          - Key: "Name"
            Value: "net-109-rt-3"
          - Key: "Purpose"
            Value: !Ref dojo

    Net109Rt2:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref Net109Vpc2
        Tags:
          - Key: "Name"
            Value: "net-109-rt-2"
          - Key: "Purpose"
            Value: !Ref dojo

    Net109Rt1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref Net109Vpc1
        Tags:
          - Key: "Name"
            Value: "net-109-rt-1"
          - Key: "Purpose"
            Value: !Ref dojo

    RouteToInternet:
      Type: AWS::EC2::Route
      DependsOn: IGW
      Properties:
         RouteTableId: !Ref Net109Rt3
         DestinationCidrBlock: 0.0.0.0/0
         GatewayId: !Ref IGW

    RTSubnet3Association:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref Net109Rt3
        SubnetId: !Ref Subnet3

    RTSubnet2Association:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref Net109Rt2
        SubnetId: !Ref Subnet2

    RTSubnet1Association:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref Net109Rt1
        SubnetId: !Ref Subnet1

    Net109Sg3:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: !Ref Net109Vpc3
        GroupDescription: "Security group for net-109 vpc3"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: "Name"
            Value: "net-109-sg-3"
          - Key: "Purpose"
            Value: !Ref dojo

    Net109Sg2:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: !Ref Net109Vpc2
        GroupDescription: "Security group for net-109 vpc2"
        Tags:
          - Key: "Name"
            Value: "net-109-sg-2"
          - Key: "Purpose"
            Value: !Ref dojo

    Net109Sg1:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: !Ref Net109Vpc1
        GroupDescription: "Security group for net-109 vpc1"
        Tags:
          - Key: "Name"
            Value: "net-109-sg-1"
          - Key: "Purpose"
            Value: !Ref dojo

  # Create one EC2 in each subnet
    EC2Number1:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: 't2.micro'
        KeyName: 'aws-workout-key'
        ImageId: !Ref LatestAmiId
        NetworkInterfaces:
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            GroupSet:
              - !Ref Net109Sg1
            SubnetId: !Ref Subnet1
        Tags:
          - Key: "Name"
            Value: "net-109-ec2-1"
          - Key: "Purpose"
            Value: !Ref dojo

    EC2Number2:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: 't2.micro'
        KeyName: 'aws-workout-key'
        ImageId: !Ref LatestAmiId
        NetworkInterfaces:
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            GroupSet:
              - !Ref Net109Sg2
            SubnetId: !Ref Subnet2
        Tags:
          - Key: "Name"
            Value: "net-109-ec2-2"
          - Key: "Purpose"
            Value: !Ref dojo

    EC2Number3:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: 't2.micro'
        KeyName: 'aws-workout-key'
        ImageId: !Ref LatestAmiId
        NetworkInterfaces:
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            GroupSet:
              - !Ref Net109Sg3
            SubnetId: !Ref Subnet3
        Tags:
          - Key: "Name"
            Value: "net-109-ec2-3"
          - Key: "Purpose"
            Value: !Ref dojo

# Create VPC Peering Connection between VPC 3 and VPC 2
    net109PeeringVPC3andVPC2:
      Type: 'AWS::EC2::VPCPeeringConnection'
      Properties:
        VpcId: !Ref Net109Vpc3
        PeerVpcId: !Ref Net109Vpc2
        Tags:
          - Key: "Name"
            Value: "peering-109-3-2"
          - Key: "Purpose"
            Value: !Ref dojo

    RouteFromVPC2ToVPC3:
      Type: AWS::EC2::Route
      Properties:
         RouteTableId: !Ref Net109Rt2
         DestinationCidrBlock: !GetAtt Net109Vpc3.CidrBlock
         VpcPeeringConnectionId: !Ref net109PeeringVPC3andVPC2

    RouteFromVPC3ToVPC2:
      Type: AWS::EC2::Route
      Properties:
         RouteTableId: !Ref Net109Rt3
         DestinationCidrBlock: !GetAtt Net109Vpc2.CidrBlock
         VpcPeeringConnectionId: !Ref net109PeeringVPC3andVPC2

    SGRuleVPC2FromVPC3:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        CidrIp: !GetAtt Net109Vpc3.CidrBlock
        FromPort: 0
        GroupId: !Ref Net109Sg2
        IpProtocol: -1
        ToPort: 0

    SGRuleVPC3FromVPC2:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        CidrIp: !GetAtt Net109Vpc2.CidrBlock
        FromPort: 0
        GroupId: !Ref Net109Sg3
        IpProtocol: -1
        ToPort: 0

  # Create VPC Peering Connection between VPC 2 and VPC 1
    net109PeeringVPC2andVPC1:
      Type: 'AWS::EC2::VPCPeeringConnection'
      Properties:
        VpcId: !Ref Net109Vpc2
        PeerVpcId: !Ref Net109Vpc1
        Tags:
          - Key: "Name"
            Value: "peering-109-2-1"
          - Key: "Purpose"
            Value: !Ref dojo

    RouteFromVPC1ToVPC2:
      Type: AWS::EC2::Route
      Properties:
         RouteTableId: !Ref Net109Rt1
         DestinationCidrBlock: !GetAtt Net109Vpc2.CidrBlock
         VpcPeeringConnectionId: !Ref net109PeeringVPC2andVPC1

    RouteFromVPC2ToVPC1:
      Type: AWS::EC2::Route
      Properties:
         RouteTableId: !Ref Net109Rt2
         DestinationCidrBlock: !GetAtt Net109Vpc1.CidrBlock
         VpcPeeringConnectionId: !Ref net109PeeringVPC2andVPC1

    SGRuleVPC1FromVPC2:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        CidrIp: !GetAtt Net109Vpc2.CidrBlock
        FromPort: 0
        GroupId: !Ref Net109Sg1
        IpProtocol: -1
        ToPort: 0

    SGRuleVPC2FromVPC1:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        CidrIp: !GetAtt Net109Vpc1.CidrBlock
        FromPort: 0
        GroupId: !Ref Net109Sg2
        IpProtocol: -1
        ToPort: 0
